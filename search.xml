<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>FYP Web App</title>
    <url>/posts/672a/</url>
    <content><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h2><h3 id="1-1-The-Aim-of-The-WebApp"><a href="#1-1-The-Aim-of-The-WebApp" class="headerlink" title="1.1 The Aim of The WebApp"></a>1.1 The Aim of The WebApp</h3><p>　　As a supplement to FYP App, this webapp aims to use a more lightweight framework to achieve the goals of FYP, including wound contour recognition, wound area estimation, corresponding 3D printing material estimation, and corresponding wound characteristics analysis.Thanks to the framework named <a href="https://streamlit.io/">Streamlit</a>.</p>
<h3 id="1-2-Brief-Introduction-of-the-Streamlit"><a href="#1-2-Brief-Introduction-of-the-Streamlit" class="headerlink" title="1.2 Brief Introduction of the Streamlit"></a>1.2 Brief Introduction of the Streamlit</h3><p>　　Streamlit turns data scripts into shareable web apps in minutes.Adding a widget is the same as declaring a variable. No need to write a backend, define routes, handle HTTP requests, connect a frontend, write HTML, CSS, JavaScript, …<br>　　And the installation is simple that you can use the code as follow to install the package:</p>
<figure class="highlight python"><table><tr><td class="code"><pre class="line-numbers language-hljs python"><code class="language-hljs python">pip install streamlit -i https://pypi.tuna.tsinghua.edu.cn/simple<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></table></figure>

<h2 id="2-Segmentation-Based-on-OpenCV"><a href="#2-Segmentation-Based-on-OpenCV" class="headerlink" title="2.Segmentation Based on OpenCV"></a>2.Segmentation Based on OpenCV</h2><p>　　At the beginning,dragging or uploading the wound image via local address or photo album.In order to analyze the wound image,the following steps are necessary,which is demonstrated as follow:</p>
<ul>
<li><strong>Step 1</strong> - Calibrate image. The calibration of the image can be realized by dragging the corners of the marker over two points of known distance in the horizontal axis and enter the distance.</li>
<li><strong>Step 2</strong> - Adjust the bounding box to select the wound(<em>Region Of Interest</em>).</li>
<li><strong>Step 3</strong> - Adjust the Threshold and Ratio sliders to get the ideal segmentation.</li>
</ul>
<h3 id="2-1-The-UI-Interface-of-OpenCV-Method"><a href="#2-1-The-UI-Interface-of-OpenCV-Method" class="headerlink" title="2.1 The UI Interface of OpenCV Method"></a>2.1 The UI Interface of OpenCV Method</h3><blockquote>
<p>The UI interface must contain the image browser,slider,and the illustration of image.</p>
</blockquote>
<h4 id="2-1-1-The-Realization-of-Image-Uploader"><a href="#2-1-1-The-Realization-of-Image-Uploader" class="headerlink" title="2.1.1 The Realization of Image Uploader"></a>2.1.1 The Realization of Image Uploader</h4><p>The uploader component is simple to use </p>
<figure class="highlight python"><table><tr><td class="code"><pre class="line-numbers language-hljs python">streamlit.file_uploader(label, <span class="hljs-built_in">type</span>=<span class="hljs-literal">None</span>, accept_multiple_files=<span class="hljs-literal">False</span>, key=<span class="hljs-literal"><code class="language-hljs python">streamlit.file_uploader(label, <span class="hljs-built_in">type</span>=<span class="hljs-literal">None</span>, accept_multiple_files=<span class="hljs-literal">False</span>, key=<span class="hljs-literal">None</span>)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></table></figure>
<blockquote>
<p>Parameters</p>
</blockquote>
<ul>
<li><strong>label (<em>str</em>)</strong> – A short label explaining to the user what this file uploader is for.</li>
<li><strong>type (<em>str or list of str or None</em>)</strong> – Array of allowed extensions. <code>&quot;png&quot;</code>,<code>&quot;jpg&quot;</code>. The default is None, which means all extensions are allowed.</li>
<li><strong>accept_multiple_files (bool)</strong> – If True, allows the user to upload multiple files at the same time, in which case the return value will be a list of files. Default: False</li>
<li><strong>key (<em>str</em>)</strong> – An optional string to use as the unique key for the widget. If this is omitted, a key will be generated for the widget based on its content. Multiple widgets of the same type may not share the same key.</li>
</ul>
<h4 id="2-1-1-The-Realization-of-Threshold-Adjust"><a href="#2-1-1-The-Realization-of-Threshold-Adjust" class="headerlink" title="2.1.1 The Realization of Threshold Adjust"></a>2.1.1 The Realization of Threshold Adjust</h4><p>The ROI Selection and Threshold Adjusting is using streamlit-cropper and streamlit slider,the installation of the streamlit-cropper and the interpretation of the streamlit slider is demonstrated as follow:</p>
<figure class="highlight python"><table><tr><td class="code"><pre class="line-numbers language-hljs python"><code class="language-hljs python">pip install streamlit-cropper<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></table></figure>
<p><img src="/.com//streamlit_cropper_demo.gif" alt="Demo of Image Cropper"></p>
<figure class="highlight python"><table><tr><td class="code"><pre class="line-numbers language-hljs python">streamlit.slider(label, min_value=<span class="hljs-literal">None</span>, max_value=<span class="hljs-literal">None</span>, value=<span class="hljs-literal">None</span>, step=<span class="hljs-literal">None</span>, <span class="hljs-built_in">format</span>=<span class="hljs-literal">None</span>, key=<span class="hljs-literal"><code class="language-hljs python">streamlit.slider(label, min_value=<span class="hljs-literal">None</span>, max_value=<span class="hljs-literal">None</span>, value=<span class="hljs-literal">None</span>, step=<span class="hljs-literal">None</span>, <span class="hljs-built_in">format</span>=<span class="hljs-literal">None</span>, key=<span class="hljs-literal">None</span>)<br><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></td></tr></table></figure>
<p>The detailed usage please refer to the <a href="https://docs.streamlit.io/en/latest/api.html?highlight=slider#streamlit.slider">official documentation</a></p>
<h3 id="2-2-The-Implementation-of-Wound-Segmentation"><a href="#2-2-The-Implementation-of-Wound-Segmentation" class="headerlink" title="2.2 The Implementation of Wound Segmentation"></a>2.2 The Implementation of Wound Segmentation</h3><p>The input image is processed based on GaussianBlur and Edge detection(<em>Canny Edge</em>)<br>Resize the input image into the shape of <code>(256,256)</code>,then turn the format of input image into RGB,Gray and LAB.<br>Set the threshold to the value which adjusted by the slider mentioned before,and then the result will be illustrated below the original image.</p>
]]></content>
      <categories>
        <category>FYP Record</category>
      </categories>
      <tags>
        <tag>FYP</tag>
        <tag>WebApp</tag>
        <tag>Streamlit</tag>
      </tags>
  </entry>
</search>
